Toggle As CanvasComponent:
    borderRadius: =200
    BWidth: =1.0
    DarkMode: =false
    Fill: =RGBA(0, 0, 0, 0)
    Height: =169
    IconVisible: =true
    LinealGradientColour1: |-
        ="#2c3e50"
    LinealGradientColour2: |-
        ="#2398db"
    Toggled: =If(IsBlank(varToggled), true, varToggled)
    Width: =500
    X: =0
    Y: =0
    ZIndex: =19

    Toggle_HTML As htmlViewer:
        Height: =Parent.Height
        HtmlText: |-
            ="<div
                style='
                    margin:4px;
                    background: 
                        "&If(
                            Toggle.DarkMode = true,
                            If(
                                Toggle.Toggled = false,
                                "linear-gradient(135deg, rgba(36,36,44,1) 0%, rgba(52,57,61,1) 100%)",
                                "linear-gradient(to right, "& Toggle.LinealGradientColour1 &", "& Toggle.LinealGradientColour2 &")"
                            ),
                            If(
                                Toggle.Toggled = false,
                                "#e8eaec",
                                "linear-gradient(to right, "& Toggle.LinealGradientColour1 &", "& Toggle.LinealGradientColour2 &")"
                            )
                        )&";
                    isolation: isolate;
                    position: relative;
                    height: "&Self.Height-24&"px;
                    width: "&Self.Width -27&"px;
                    border-radius: "&Toggle.borderRadius&"px;
                    overflow: hidden;
                    box-shadow:
                        "&If(
                            Toggle.DarkMode = true ,
                            "inset 3px 3px 3px 0px #1e2126, inset -3px -3px 3px 0px rgba(61,61,69,1)",
                            "inset 4px 4px 12px #bec0c2,inset -2px -5px 10px #ffffff, 6px 5px 12px rgba(13, 39, 80, 0.25), 4px 2px 10px white, inset -15px -1px 10px rgba(13, 39, 80, 0.25), inset 8px 8px 20px rgba(13, 39, 80, 0.2)"
                        )&";
            '>  
                <div
                    style='
                        margin:0px;
                        background-color:#;
                        transform:translate("&Toggle_Button.X - Toggle_HTML.PaddingRight*1.3&"px,0);
                        height: "&Toggle_Button.Height&"px;
                        width: "&Toggle_Button.Width &"px;
                        background:
                            "&If(
                                Toggle.DarkMode = true,
                                "linear-gradient(135deg, rgba(36,36,44,1) 0%, rgba(52,57,61,1) 100%)",
                                "#e8eaec"
                                )&";
                        border-radius: "&Toggle.borderRadius&"px;
                        box-shadow: 
                            "&If(
                                Toggle.DarkMode = true,
                                If(
                                    Toggle.Toggled = false,
                                    "-8px -8px 10px 0px rgba(61,61,69,1), 8px 8px 10px 0px #1e2126;",
                                    "inset 3px 3px 3px 0px #1e2126, inset -3px -3px 3px 0px rgba(61,61,69,1)"
                                ),
                                If(
                                    Toggle.Toggled = false,
                                    "12px 12px 32px rgba(13, 39, 80, 0.25), -10px -10px 15px white",
                                    "inset 4px 4px 7px #bec0c2,inset -4px -4px 7px #ffffff, inset -15px -15px 20px rgba(255, 255, 255, 0.7), inset 8px 8px 30px rgba(13, 39, 80, 0.2)"
                                )
                            )&";'
                >
                </div>
            </div>"
        Width: =Parent.Width
        ZIndex: =1

    Toggle_Image As image:
        Height: =Toggle_Button.Height/2
        Image: |-
            ="data:image/svg+xml;utf8, "&EncodeUrl("
            <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='blue' class='bi bi-power' viewBox='0 0 16 16'>
            
            "& If(Toggle.Toggled = true,
            "<defs>  
             <linearGradient id='gradient' x1='0%' y1='0%' x2='0%' y2='100%'>  
             <stop offset='%' style='stop-color: "& Toggle.LinealGradientColour1&" ;'></stop>  
             <stop offset='100%' style='stop-color: "& Toggle.LinealGradientColour2 &" ;'></stop>  
             </linearGradient>  
            </defs>", "") &"
            
              <path fill= ' "& If(Toggle.Toggled = true,   "url(#gradient)", "#656565") &"' d='M7.5 1v7h1V1h-1z'/>
              <path fill= ' "& If(Toggle.Toggled = true,   "url(#gradient)", "#656565") &"' d='M3 8.812a4.999 4.999 0 0 1 2.578-4.375l-.485-.874A6 6 0 1 0 11 3.616l-.501.865A5 5 0 1 1 3 8.812z'/>
            </svg>
            ")
        Visible: =Toggle.IconVisible
        Width: =Toggle_Button.Width/2
        X: =Toggle_Button.X + Self.Width/2
        Y: =Toggle_Button.Y + Self.Height/2
        ZIndex: =3

    Toggle_Button As button:
        BorderThickness: =0
        Fill: =RGBA(0, 0, 0, 0)
        FocusedBorderThickness: =0
        FontWeight: =FontWeight.Bold
        Height: =Toggle_HTML.Height -24
        HoverFill: =RGBA(196,196,196,0.2)
        OnSelect: =Set(varToggled, If(Toggle.Toggled = true, false, true))
        PressedFill: =RGBA(196,196,196,0.5)
        RadiusBottomLeft: =Toggle.borderRadius
        RadiusBottomRight: =Toggle.borderRadius
        RadiusTopLeft: =Toggle.borderRadius
        RadiusTopRight: =Toggle.borderRadius
        Size: =24
        Text: =""
        Width: =Self.Height*Toggle.BWidth
        X: =If(Toggle.Toggled = true ,Toggle_HTML.Width- Self.Width - Toggle_HTML.PaddingLeft*4,Toggle_HTML.PaddingLeft*2)
        Y: =9
        ZIndex: =4

